#[no_std]
impl @string {
	is_empty: #[desc("Returns true if the string has a length of 0, false otherwise")]
	(self) {
		return self.length == 0;
	},
	substr: #[desc("Gets a substring beginning at the specified start and ending at the specified end.")]
	(self, start: @number, end: @number) {
		if start > end { return $.substr(self, end, start); }
		return $.substr(self, start, end);
	},
	join: #[desc("Joins a list using the string.")]
	(self, list: @array) {
		let out = "";
		for i in list {
			out += @string(i);
			out += self;
		}
		return out.substr(0, out.length-self.length);
	},
	split: #[desc("Splits the string by the specified seperator.")]
	(self, spstr: @string) {
		if spstr.length == 0 {
			return self as @array;
		} else {
			return $.split_str(self, spstr);
		}
	},
	starts_with: #[desc("Checks does the string starts with a string.")]
	(self, substr: @string) {
		if substr == '' { return true }
		if substr.length > self.length { return false }
		return self.substr(0, substr.length) == substr;
	},
	ends_with: #[desc("Checks does the string starts with a string.")]
	(self, substr: @string) {
		if substr == '' { return true }
		if substr.length > self.length { return false }
		return self.substr(self.length-substr.length, self.length) == substr;
	},
	index: #[desc("Gets the index of a string, if it doesn't exists returns null.")]
	(self, substr: @string) {
		if substr == '' { return null }
		if substr.length > self.length { return null }
		r = self.length - substr.length + 1
		for i in 0..r {
			if $.substr(self, i, i + substr.length) == substr {
				return i
			}
		}
		return null
	},
	contains: #[desc("Checks if the string contains a string.")]
	(self, substr: @string) {
		return self has substr
	},
	reverse: #[desc("Reverses the string.")]
	(self) {
		return ''.join(self.split('').reverse())
	},
	lowercase: #[desc("Makes whole string lowercase.")]
	(self) {
		dict = {A:'a',B:'b',C:'c',D:'d',E:'e',F:'f',G:'g',H:'h',I:'i',J:'j',K:'k',L:'l',M:'m',N:'n',O:'o',P:'p',Q:'q',R:'r',S:'s',T:'t',U:'u',V:'v',W:'w',X:'x',Y:'y',Z:'z'}
		return ''.join(self.split('').map(el => dict.get(el, el)))
	},
	uppercase: #[desc("Makes whole string uppercase.")]
	(self) {
		dict = {a:'A',b:'B',c:'C',d:'D',e:'E',f:'F',g:'G',h:'H',i:'I',j:'J',k:'K',l:'L',m:'M',n:'N',o:'O',p:'P',q:'Q',r:'R',s:'S',t:'T',u:'U',v:'V',w:'W',x:'X',y:'Y',z:'Z'}
		return ''.join(self.split('').map(el => dict.get(el, el)))
	},
	is_upper: #[desc("Checks if whole string is uppercase, ignores characters that is not in the alphabet.")]
	(self) {
		return self.uppercase() == self
	},
	is_lower: #[desc("Checks if whole string is lowercase, ignores characters that is not in the alphabet.")]
	(self) {
		return self.lowercase() == self
	}
}
