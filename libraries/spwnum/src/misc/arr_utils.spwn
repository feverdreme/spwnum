impl @array {
    depth: (arr: @array) {
        if arr[0].type == @number {
            return 1
        } else {
            return 1 + @array::depth(arr[0])
        }
    }
}

impl @array {
    concat: (arr1: @array, arr2: @array) {
        let ret_arr = arr1

        for i in arr2 {
            ret_arr.push(i)
        }

        return ret_arr
    }
}

impl @array {
    shape: (self) {
        // terminal case
        if self[0].type == @number {
            return [self.length]
        }
        
        return @array::concat([self.length], self[0].shape())
    }
}

impl @array {
    copy: (self) {
        return self.map(x => x)
    }
}

impl @array {
    to_tensor: (self) {
        return @tensor::new(arr = self.copy())
    }
}

impl @array {
    from_shape: (shape: [@number], depth: @number = 0) {
        let ret_arr = []
    
        if depth == shape.length - 1 {
            for i in 0..shape[depth] {
                ret_arr.push(0)
            }

        } else {
            elem_arr = @array::from_shape(shape, depth + 1)

            for i in 0..shape[depth] {
                ret_arr.push(elem_arr)
            }
        }

        return ret_arr
    }  
}